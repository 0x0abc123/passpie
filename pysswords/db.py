from glob import glob
import logging
import os
import gnupg

from .utils import which


class Database(object):

    @classmethod
    def _key_input(cls, gpg, passphrase, testing=False):
        key_input = gpg.gen_key_input(
            name_real='Pysswords',
            name_email='pysswords@pysswords',
            name_comment='Autogenerated by Pysswords',
            passphrase=passphrase,
            testing=testing
        )
        return key_input

    @classmethod
    def _create_gpg(cls, binary, database_path, passphrase):
        gnupg_path = os.path.join(database_path, ".gnupg")
        gpg = gnupg.GPG(which(binary), homedir=gnupg_path)

        gpg.gen_key(Database._key_input(gpg, passphrase))
        logging.info("Pysswords database initialized at `{}`".format(
            database_path))
        return gpg

    def __init__(self, path, passphrase, gpg_bin="gpg2"):
        self.path = path
        self.gpg = Database._create_gpg(gpg_bin, self.path, passphrase)

    @property
    def gpg_key(self, secret=False):
        return self.gpg.list_keys(secret=secret)[0]

    def add(self, credential):
        credential_path = os.path.join(self.path, credential["name"])
        os.makedirs(credential_path, exist_ok=False)

        with open(os.path.join(credential_path, "login"), "w") as f:
            f.write(credential["login"])

        with open(os.path.join(credential_path, "password"), "w") as f:
            encrypted = self.gpg.encrypt(
                credential["password"],
                self.gpg_key
            )
            f.write(str(encrypted))

        with open(os.path.join(credential_path, "comments"), "w") as f:
            f.write(credential["comments"])

    def credential(self, name):
        credential_path = os.path.join(self.path, name)
        login_file_path = os.path.join(credential_path, "login")
        password_file_path = os.path.join(credential_path, "password")
        comments_file_path = os.path.join(credential_path, "comments")
        credential = {
            'name': os.path.basename(credential_path),
            'login': open(login_file_path).read(),
            'password': open(password_file_path).read(),
            'comments': open(comments_file_path).read()
        }
        return credential

    @property
    def credentials(self):
        return [self.credential(os.path.basename(c))
                for c in glob(self.path + "/**")]
